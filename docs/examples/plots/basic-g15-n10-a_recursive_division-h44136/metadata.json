{
  "name": "basic",
  "grid_n": 15,
  "maze_ctor": "gen_recursive_division",
  "maze_ctor_kwargs": {},
  "description": "Basic RECURSIVE_DIVISION maze (15x15)",
  "tags": [
    "algo:recursive_division",
    "basic",
    "grid:15"
  ],
  "config": {
    "__muutils_format__": "MazeDatasetConfig(SerializableDataclass)",
    "name": "basic",
    "seq_len_min": 1,
    "seq_len_max": 512,
    "seed": 42,
    "applied_filters": [],
    "grid_n": 15,
    "n_mazes": 10,
    "maze_ctor": {
      "__name__": "gen_recursive_division",
      "__module__": "maze_dataset.generation.generators",
      "__doc__": [
        "Generate a maze using the recursive division algorithm.",
        "This function generates a maze by recursively dividing the grid with walls and carving a single",
        "passage through each wall. The algorithm begins with a fully connected grid (i.e. every pair of adjacent",
        "cells is connected) and then removes connections along a chosen division line\u2014leaving one gap as a passage.",
        "The resulting maze is a perfect maze, meaning there is exactly one path between any two cells.",
        "# Parameters:",
        "- `grid_shape : Coord | CoordTup`",
        "The shape of the maze grid (e.g., `(n_rows, n_cols)`).",
        "- `lattice_dim : int`",
        "The lattice dimension (default is `2`).",
        "- `start_coord : Coord | None`",
        "Optionally, specify a starting coordinate. If `None`, a random coordinate is chosen.",
        "- `**kwargs`",
        "Additional keyword arguments (currently unused).",
        "# Returns:",
        "- `LatticeMaze`",
        "A maze represented by a connection list, generated using recursive division.",
        "# Usage:",
        "```python",
        "maze = gen_recursive_division((10, 10))",
        "```"
      ],
      "source_code": [
        "\t@staticmethod",
        "\tdef gen_recursive_division(",
        "\t\tgrid_shape: \"Coord | CoordTup\",",
        "\t\tlattice_dim: int = 2,",
        "\t\tstart_coord: \"Coord | None\" = None,",
        "\t) -> \"LatticeMaze\":",
        "\t\t\"\"\"Generate a maze using the recursive division algorithm.",
        "",
        "\t\tThis function generates a maze by recursively dividing the grid with walls and carving a single",
        "\t\tpassage through each wall. The algorithm begins with a fully connected grid (i.e. every pair of adjacent",
        "\t\tcells is connected) and then removes connections along a chosen division line\u2014leaving one gap as a passage.",
        "\t\tThe resulting maze is a perfect maze, meaning there is exactly one path between any two cells.",
        "",
        "\t\t# Parameters:",
        "\t\t- `grid_shape : Coord | CoordTup`",
        "\t\t\tThe shape of the maze grid (e.g., `(n_rows, n_cols)`).",
        "\t\t- `lattice_dim : int`",
        "\t\t\tThe lattice dimension (default is `2`).",
        "\t\t- `start_coord : Coord | None`",
        "\t\t\tOptionally, specify a starting coordinate. If `None`, a random coordinate is chosen.",
        "\t\t- `**kwargs`",
        "\t\t\tAdditional keyword arguments (currently unused).",
        "",
        "\t\t# Returns:",
        "\t\t- `LatticeMaze`",
        "\t\t\tA maze represented by a connection list, generated using recursive division.",
        "",
        "\t\t# Usage:",
        "\t\t```python",
        "\t\tmaze = gen_recursive_division((10, 10))",
        "\t\t```",
        "\t\t\"\"\"",
        "\t\tassert lattice_dim == 2, (  # noqa: PLR2004",
        "\t\t\t\"Recursive division algorithm is only implemented for 2D lattices.\"",
        "\t\t)",
        "\t\t# Convert grid_shape to a tuple of ints.",
        "\t\tgrid_shape = tuple(int(x) for x in grid_shape)",
        "\t\tn_rows, n_cols = grid_shape",
        "",
        "\t\t# Initialize connection_list as a fully connected grid.",
        "\t\t# For horizontal connections: for each cell (i,j) with i in [0, n_rows-2], set connection to True.",
        "\t\t# For vertical connections: for each cell (i,j) with j in [0, n_cols-2], set connection to True.",
        "\t\tconnection_list = np.zeros((2, n_rows, n_cols), dtype=bool)",
        "\t\tconnection_list[0, : n_rows - 1, :] = True",
        "\t\tconnection_list[1, :, : n_cols - 1] = True",
        "",
        "\t\tdef divide(x: int, y: int, width: int, height: int) -> None:",
        "\t\t\t\"\"\"Recursively divide the region starting at (x, y) with the given width and height.",
        "",
        "\t\t\tRemoves connections along the chosen division line except for one randomly chosen gap.",
        "\t\t\t\"\"\"",
        "\t\t\tif width < 2 or height < 2:  # noqa: PLR2004",
        "\t\t\t\treturn",
        "",
        "\t\t\tif width > height:",
        "\t\t\t\t# Vertical division.",
        "\t\t\t\twall_col = random.randint(x + 1, x + width - 1)",
        "\t\t\t\tgap_row = random.randint(y, y + height - 1)",
        "\t\t\t\tfor row in range(y, y + height):",
        "\t\t\t\t\tif row == gap_row:",
        "\t\t\t\t\t\tcontinue",
        "\t\t\t\t\t# Remove the vertical connection between (row, wall_col-1) and (row, wall_col).",
        "\t\t\t\t\tif wall_col - 1 < n_cols - 1:",
        "\t\t\t\t\t\tconnection_list[1, row, wall_col - 1] = False",
        "\t\t\t\t# Recurse on the left and right subregions.",
        "\t\t\t\tdivide(x, y, wall_col - x, height)",
        "\t\t\t\tdivide(wall_col, y, x + width - wall_col, height)",
        "\t\t\telse:",
        "\t\t\t\t# Horizontal division.",
        "\t\t\t\twall_row = random.randint(y + 1, y + height - 1)",
        "\t\t\t\tgap_col = random.randint(x, x + width - 1)",
        "\t\t\t\tfor col in range(x, x + width):",
        "\t\t\t\t\tif col == gap_col:",
        "\t\t\t\t\t\tcontinue",
        "\t\t\t\t\t# Remove the horizontal connection between (wall_row-1, col) and (wall_row, col).",
        "\t\t\t\t\tif wall_row - 1 < n_rows - 1:",
        "\t\t\t\t\t\tconnection_list[0, wall_row - 1, col] = False",
        "\t\t\t\t# Recurse on the top and bottom subregions.",
        "\t\t\t\tdivide(x, y, width, wall_row - y)",
        "\t\t\t\tdivide(x, wall_row, width, y + height - wall_row)",
        "",
        "\t\t# Begin the division on the full grid.",
        "\t\tdivide(0, 0, n_cols, n_rows)",
        "",
        "\t\tif start_coord is None:",
        "\t\t\tstart_coord = tuple(np.random.randint(0, n) for n in grid_shape)",
        "",
        "\t\tgeneration_meta: dict = dict(",
        "\t\t\tfunc_name=\"gen_recursive_division\",",
        "\t\t\tgrid_shape=grid_shape,",
        "\t\t\tstart_coord=start_coord,",
        "\t\t\talgorithm=\"recursive_division\",",
        "\t\t\tfully_connected=True,",
        "\t\t)",
        "\t\treturn LatticeMaze(",
        "\t\t\tconnection_list=connection_list, generation_meta=generation_meta",
        "\t\t)"
      ]
    },
    "maze_ctor_kwargs": {},
    "endpoint_kwargs": {
      "except_on_no_valid_endpoint": false
    },
    "_fname_loaded": null,
    "fname": "basic-g15-n10-a_recursive_division-h44136",
    "versions": {
      "config": "1.0",
      "maze_dataset": "1.3.0"
    }
  },
  "fname": "basic-g15-n10-a_recursive_division-h44136"
}