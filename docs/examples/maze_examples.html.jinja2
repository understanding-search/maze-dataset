<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Maze Dataset Examples</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 {
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        .search-container {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f5f5f5;
            border-radius: 5px;
        }
        .filter-section {
            margin-bottom: 15px;
        }
        .filter-section h3 {
            margin-bottom: 8px;
        }
        .tag-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }
        .tag-filter {
            background-color: #e0e0e0;
            padding: 5px 10px;
            border-radius: 15px;
            cursor: pointer;
            user-select: none;
        }
        .tag-filter.active {
            background-color: #007bff;
            color: white;
        }
        input[type="text"], select {
            padding: 8px;
            width: 100%;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .maze-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .maze-card {
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .maze-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .maze-image {
            width: 100%;
            height: 300px;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f9f9f9;
            padding: 10px;
            box-sizing: border-box;
        }
        .maze-image img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }
        .maze-details {
            padding: 15px;
        }
        .maze-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .maze-description {
            margin-bottom: 10px;
            color: #555;
        }
        .maze-carousel {
            display: flex;
            overflow-x: auto;
            gap: 10px;
            margin-bottom: 10px;
            padding: 5px 0;
        }
        .maze-thumbnail {
            width: 80px;
            height: 80px;
            cursor: pointer;
            border: 2px solid transparent;
            border-radius: 4px;
            overflow: hidden;
        }
        .maze-thumbnail.active {
            border-color: #007bff;
        }
        .maze-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .maze-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 10px;
        }
        .maze-tag {
            background-color: #e0e0e0;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 12px;
        }
        .config-toggle {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .config-code {
            display: none;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            margin-top: 10px;
            white-space: pre-wrap;
            font-family: monospace;
        }
        .no-results {
            grid-column: 1 / -1;
            text-align: center;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 5px;
        }
        footer {
            margin-top: 40px;
            text-align: center;
            color: #777;
            font-size: 14px;
            border-top: 1px solid #eee;
            padding-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Maze Dataset Examples</h1>
    
    <div class="search-container">
        <div class="filter-section">
            <h3>Search by Keywords</h3>
            <input type="text" id="search-input" placeholder="Search by name, description, or configuration...">
        </div>
        
        <div class="filter-section">
            <h3>Filter by Tags</h3>
            <div class="tag-filters">
                {%- for tag in all_tags %}
                <div class="tag-filter" data-tag="{{ tag }}">{{ tag }}</div>
                {%- endfor %}
            </div>
        </div>
        
        <div class="filter-section">
            <h3>Sort By</h3>
            <select id="sort-select">
                <option value="name">Name</option>
                <option value="grid_n">Grid Size</option>
                <option value="maze_ctor">Generator</option>
            </select>
        </div>
    </div>
    
    <div class="maze-grid" id="maze-grid">
        {%- for example in maze_examples %}
        <div class="maze-card" 
             data-name="{{ example.name }}" 
             data-grid-n="{{ example.grid_n }}" 
             data-maze-ctor="{{ example.maze_ctor }}" 
             data-tags="{{ example.tags|join(',') }}" 
             data-fname="{{ example.fname }}"
             data-config-path="plots/{{ example.fname }}/metadata.json">
            <div class="maze-image">
                <img src="plots/{{ example.fname }}/plot-0.svg" alt="{{ example.name }}" class="main-image">
            </div>
            <div class="maze-carousel">
                {% for i in range(6) %}
                <div class="maze-thumbnail {% if i == 0 %}active{% endif %}" data-index="{{ i }}">
                    <img src="plots/{{ example.fname }}/plot-{{ i }}.svg" alt="Example {{ i }}" loading="lazy">
                </div>
                {% endfor %}
            </div>
            <div class="maze-details">
                <div class="maze-title">{{ example.name }}</div>
                <div class="maze-description">Grid size: {{ example.grid_n }}x{{ example.grid_n }}</div>
                <div class="maze-tags">
                    {%- for tag in example.tags %}
                    <span class="maze-tag">{{ tag }}</span>
                    {%- endfor %}
                </div>
                <button class="config-toggle">Show Configuration</button>
                <div class="config-code"></div>
            </div>
        </div>
        {%- endfor %}
        <div class="no-results" style="display: none;">No mazes match your search criteria.</div>
    </div>

    <footer>
        Generated using <a href="https://github.com/understanding-search/maze-dataset">maze-dataset</a>
    </footer>

    <script>
        // Load configuration data lazily
        document.querySelectorAll('.config-toggle').forEach(button => {
            button.addEventListener('click', async function() {
                const card = this.closest('.maze-card');
                const codeBlock = this.nextElementSibling;
                
                if (codeBlock.style.display === 'none' || codeBlock.style.display === '') {
                    // If config hasn't been loaded yet
                    if (!codeBlock.dataset.loaded) {
                        const configPath = card.getAttribute('data-config-path');
                        try {
                            const response = await fetch(configPath);
                            const data = await response.json();
                            
                            // Format the configuration data
                            codeBlock.innerHTML = `<h4>Maze Constructor:</h4>
<pre>${data.maze_ctor}</pre>

<h4>Constructor Parameters:</h4>
<pre>${JSON.stringify(data.maze_ctor_kwargs, null, 2)}</pre>

<h4>Maze Configuration:</h4>
<pre>${JSON.stringify(data.config, null, 2)}</pre>`;
                            
                            codeBlock.dataset.loaded = 'true';
                        } catch (error) {
                            codeBlock.innerHTML = `<p>Error loading configuration: ${error.message}</p>`;
                        }
                    }
                    
                    codeBlock.style.display = 'block';
                    this.textContent = 'Hide Configuration';
                } else {
                    codeBlock.style.display = 'none';
                    this.textContent = 'Show Configuration';
                }
            });
        });

        // Image carousel functionality
        document.querySelectorAll('.maze-thumbnail').forEach(thumbnail => {
            thumbnail.addEventListener('click', function() {
                const card = this.closest('.maze-card');
                const imageIndex = this.getAttribute('data-index');
                const mainImage = card.querySelector('.main-image');
                const fname = card.getAttribute('data-fname');
                
                // Update main image
                mainImage.src = `plots/${fname}/plot-${imageIndex}.svg`;
                
                // Update active thumbnail
                card.querySelectorAll('.maze-thumbnail').forEach(thumb => {
                    thumb.classList.remove('active');
                });
                this.classList.add('active');
            });
        });

        // Filter functionality
        const searchInput = document.getElementById('search-input');
        const sortSelect = document.getElementById('sort-select');
        const mazeCards = document.querySelectorAll('.maze-card');
        const tagFilters = document.querySelectorAll('.tag-filter');
        const noResults = document.querySelector('.no-results');
        
        let activeTagFilters = [];
        
        function filterMazes() {
            const searchTerm = searchInput.value.toLowerCase();
            let visibleCount = 0;
            
            mazeCards.forEach(card => {
                const name = card.getAttribute('data-name').toLowerCase();
                const gridN = card.getAttribute('data-grid-n');
                const mazeCtor = card.getAttribute('data-maze-ctor');
                const tags = card.getAttribute('data-tags').split(',');
                
                const matchesSearch = name.includes(searchTerm) || 
                                     gridN.includes(searchTerm) ||
                                     mazeCtor.includes(searchTerm);
                
                const matchesTags = activeTagFilters.length === 0 || 
                                  activeTagFilters.every(tag => tags.includes(tag));
                
                if (matchesSearch && matchesTags) {
                    card.style.display = 'block';
                    visibleCount++;
                } else {
                    card.style.display = 'none';
                }
            });
            
            noResults.style.display = visibleCount === 0 ? 'block' : 'none';
        }
        
        function sortMazes() {
            const sortBy = sortSelect.value;
            const mazeGrid = document.getElementById('maze-grid');
            const mazeArray = Array.from(mazeCards);
            
            mazeArray.sort((a, b) => {
                if (sortBy === 'name') {
                    return a.getAttribute('data-name').localeCompare(b.getAttribute('data-name'));
                } else if (sortBy === 'grid_n') {
                    return parseInt(a.getAttribute('data-grid-n')) - parseInt(b.getAttribute('data-grid-n'));
                } else if (sortBy === 'maze_ctor') {
                    return a.getAttribute('data-maze-ctor').localeCompare(b.getAttribute('data-maze-ctor'));
                }
                return 0;
            });
            
            mazeArray.forEach(card => {
                mazeGrid.appendChild(card);
            });
        }
        
        searchInput.addEventListener('input', filterMazes);
        sortSelect.addEventListener('change', sortMazes);
        
        tagFilters.forEach(tag => {
            tag.addEventListener('click', function() {
                const tagValue = this.getAttribute('data-tag');
                
                if (this.classList.contains('active')) {
                    // Remove tag from active filters
                    this.classList.remove('active');
                    activeTagFilters = activeTagFilters.filter(t => t !== tagValue);
                } else {
                    // Add tag to active filters
                    this.classList.add('active');
                    activeTagFilters.push(tagValue);
                }
                
                filterMazes();
            });
        });
        
        // Initial sort
        sortMazes();
    </script>
</body>
</html>